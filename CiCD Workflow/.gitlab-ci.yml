
# -------------------------------
# GitLab CI/CD Pipeline Definition
# File: .gitlab-ci.yml
# -------------------------------

# Define pipeline stages (executed in order)
stages:
  - build        # Compile / package application
  - test         # Run tests (unit, integration, linting, etc.)
  - deploy       # Deploy to an environment

# -------------------------------
# Build Stage
# -------------------------------
build:               # Job name
  stage: build           # Stage this job belongs to
  image: python:3.10     # Use Python Docker image for the build
  script:                # Commands executed by runner
    - echo "Installing dependencies..."
    - pip install -r requirements.txt
    - echo "Building application..."
    - python setup.py build
  artifacts:             # Files to save and pass to next stage
    paths:
      - build/           # Save the build output folder
    expire_in: 1 week    # Artifacts will expire after 1 week
  cache:                 # Cache dependencies for faster builds
    paths:
      - .venv/           # Virtual environment directory

# -------------------------------
# Test Stage
# -------------------------------
test:                # Job name
  stage: test            # Stage this job belongs to
  image: python:3.10
  dependencies:          # Depend on artifacts from previous job
    - build
  script:
    - echo "Running tests..."
    - pytest tests/      # Run tests inside the tests/ folder
  artifacts:
    when: always         # Always upload test reports (even if failed)
    reports:
      junit: report.xml  # Upload JUnit-style test report

# -------------------------------
# Deploy Stage
# -------------------------------
deploy:              # Job name
  stage: deploy
  image: alpine:latest   # Lightweight image for deployment scripts
  environment:           # Define deployment environment
    name: production     # Environment name (Dev, Staging, Prod, etc.)
    url: https://example.com   # URL for environment dashboard
  script:
    - echo "Deploying application..."
    - ./deploy.sh        # Run deployment script
  only:
    - main               # Run deploy job only on 'main' branch

# -------------------------------
# Scheduled Example
# -------------------------------
nightly:
  stage: test
  script:
    - echo "Running nightly checks..."
  only:
    - schedules          # Triggered by scheduled pipeline
